import 'whatwg-fetch';
import { stringify } from 'query-string';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineProperty = _defineProperty;

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      defineProperty(target, key, source[key]);
    });
  }

  return target;
}

var objectSpread = _objectSpread;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var classCallCheck = _classCallCheck;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var createClass = _createClass;

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

var arrayWithoutHoles = _arrayWithoutHoles;

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

var iterableToArray = _iterableToArray;

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var nonIterableSpread = _nonIterableSpread;

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

var toConsumableArray = _toConsumableArray;

// 返回一个组合了所有插件的“插件”
function compose(middlewares) {
  if (!Array.isArray(middlewares)) throw new TypeError('Middlewares must be an array!');
  var middlewaresLen = middlewares.length;

  for (var i = 0; i < middlewaresLen; i++) {
    if (typeof middlewares[i] !== 'function') throw new TypeError('Middleware must be componsed of function');
  }

  return function wrapMiddlewares(params, next) {
    var index = -1;

    function dispatch(i) {
      if (i <= index) {
        return Promise.reject(new Error('next() should not be called multiple times in one middleware!'));
      }

      index = i;
      var fn = middlewares[i] || next;
      if (!fn) return Promise.resolve();

      try {
        return Promise.resolve(fn(params, function () {
          return dispatch(i + 1);
        }));
      } catch (err) {
        return Promise.reject(err);
      }
    }

    return dispatch(0);
  };
}

var Onion =
/*#__PURE__*/
function () {
  function Onion(defaultMiddlewares) {
    classCallCheck(this, Onion);

    if (!Array.isArray(defaultMiddlewares)) throw new TypeError('Default middlewares must be an array!');
    this.middlewares = toConsumableArray(defaultMiddlewares);
    this.defaultMiddlewaresLen = defaultMiddlewares.length;
  }

  createClass(Onion, [{
    key: "use",
    value: function use(newMiddleware) {
      this.middlewares.splice(this.middlewares.length - this.defaultMiddlewaresLen, 0, newMiddleware);
    }
  }, {
    key: "execute",
    value: function execute() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var fn = compose(this.middlewares);
      return fn(params);
    }
  }]);

  return Onion;
}();

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
});

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var assertThisInitialized = _assertThisInitialized;

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

var possibleConstructorReturn = _possibleConstructorReturn;

var getPrototypeOf = createCommonjsModule(function (module) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
});

var setPrototypeOf = createCommonjsModule(function (module) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
});

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

var inherits = _inherits;

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

var isNativeFunction = _isNativeFunction;

var construct = createCommonjsModule(function (module) {
function isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    module.exports = _construct = Reflect.construct;
  } else {
    module.exports = _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

module.exports = _construct;
});

var wrapNativeSuper = createCommonjsModule(function (module) {
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return construct(Class, arguments, getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

module.exports = _wrapNativeSuper;
});

/**
 * 实现一个简单的Map cache, 稍后可以挪到 utils中, 提供session local map三种前端cache方式.
 * 1. 可直接存储对象   2. 内存无5M限制   3.缺点是刷新就没了, 看反馈后期完善.
 */
var MapCache =
/*#__PURE__*/
function () {
  function MapCache(options) {
    classCallCheck(this, MapCache);

    this.cache = new Map();
    this.timer = {};
    this.maxCache = options.maxCache || 0;
  }

  createClass(MapCache, [{
    key: "get",
    value: function get(key) {
      return this.cache.get(JSON.stringify(key));
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var _this = this;

      var ttl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;

      // 如果超过最大缓存数, 删除头部的第一个缓存.
      if (this.maxCache > 0 && this.cache.size >= this.maxCache) {
        var deleteKey = toConsumableArray(this.cache.keys())[0];

        this.cache.delete(deleteKey);

        if (this.timer[deleteKey]) {
          clearTimeout(this.timer[deleteKey]);
        }
      }

      var cacheKey = JSON.stringify(key);
      this.cache.set(cacheKey, value);

      if (ttl > 0) {
        this.timer[cacheKey] = setTimeout(function () {
          _this.cache.delete(cacheKey);

          delete _this.timer[cacheKey];
        }, ttl);
      }
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var cacheKey = JSON.stringify(key);
      delete this.timer[cacheKey];
      return this.cache.delete(cacheKey);
    }
  }, {
    key: "clear",
    value: function clear() {
      this.timer = {};
      return this.cache.clear();
    }
  }]);

  return MapCache;
}();
/**
 * 请求异常
 */

var RequestError =
/*#__PURE__*/
function (_Error) {
  inherits(RequestError, _Error);

  function RequestError(text) {
    var _this2;

    classCallCheck(this, RequestError);

    _this2 = possibleConstructorReturn(this, getPrototypeOf(RequestError).call(this, text));
    _this2.name = 'RequestError';
    return _this2;
  }

  return RequestError;
}(wrapNativeSuper(Error));
/**
 * 响应异常
 */

var ResponseError =
/*#__PURE__*/
function (_Error2) {
  inherits(ResponseError, _Error2);

  function ResponseError(response, text, data) {
    var _this3;

    classCallCheck(this, ResponseError);

    _this3 = possibleConstructorReturn(this, getPrototypeOf(ResponseError).call(this, text || response.statusText));
    _this3.name = 'ResponseError';
    _this3.data = data;
    _this3.response = response;
    return _this3;
  }

  return ResponseError;
}(wrapNativeSuper(Error));
/**
 * http://gitlab.alipay-inc.com/KBSJ/gxt/blob/release_gxt_S8928905_20180531/src/util/request.js#L63
 * 支持gbk
 */

function readerGBK(file) {
  return new Promise(function (resolve, reject) {
    var reader = new FileReader();

    reader.onload = function () {
      resolve(reader.result);
    };

    reader.onerror = reject;
    reader.readAsText(file, 'GBK'); // setup GBK decoding
  });
}
/**
 * 安全的JSON.parse
 */

function safeJsonParse(data) {
  try {
    return JSON.parse(data);
  } catch (e) {} // eslint-disable-line no-empty


  return data;
}
function timeout2Throw(msec) {
  return new Promise(function (_, reject) {
    setTimeout(function () {
      reject(new RequestError("timeout of ".concat(msec, "ms exceeded")));
    }, msec);
  });
}

// 前后缀拦截器
var addfixInterceptor = (function (url) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var prefix = options.prefix,
      suffix = options.suffix;

  if (prefix) {
    url = "".concat(prefix).concat(url);
  }

  if (suffix) {
    url = "".concat(url).concat(suffix);
  }

  return {
    url: url,
    options: options
  };
});

var requestInterceptors = [addfixInterceptor];
var responseInterceptors = [];

var Core =
/*#__PURE__*/
function () {
  function Core(initOptions, defaultMiddlewares) {
    classCallCheck(this, Core);

    this.onion = new Onion(defaultMiddlewares);
    this.mapCache = new MapCache(initOptions);
  }

  createClass(Core, [{
    key: "use",
    value: function use(newMiddleware) {
      this.onion.use(newMiddleware);
      return this;
    }
  }, {
    key: "request",
    value: function request(url, options) {
      var onion = this.onion;
      var obj = {
        req: {
          url: url,
          options: options
        },
        res: null,
        cache: this.mapCache,
        responseInterceptors: responseInterceptors
      };

      if (typeof url !== 'string') {
        throw new Error('url MUST be a string');
      }

      return new Promise(function (resolve, reject) {
        Core.dealRequestInterceptors(obj).then(function () {
          return onion.execute(obj);
        }).then(function () {
          resolve(obj.res);
        }).catch(function (error) {
          var errorHandler = obj.req.options.errorHandler;

          if (errorHandler) {
            try {
              var data = errorHandler(error);
              resolve(data);
            } catch (e) {
              reject(e);
            }
          } else {
            reject(error);
          }
        });
      });
    }
  }], [{
    key: "requestUse",
    value: function requestUse(handler) {
      if (typeof handler !== 'function') throw new TypeError('Interceptor must be function!');
      requestInterceptors.push(handler);
    }
  }, {
    key: "responseUse",
    value: function responseUse(handler) {
      if (typeof handler !== 'function') throw new TypeError('Interceptor must be function!');
      responseInterceptors.push(handler);
    } // 执行请求前拦截器

  }, {
    key: "dealRequestInterceptors",
    value: function dealRequestInterceptors(ctx) {
      var reducer = function reducer(p1, p2) {
        return p1.then(function () {
          var ret = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          ctx.req.url = ret.url || ctx.req.url;
          ctx.req.options = ret.options || ctx.req.options;
          return p2(ctx.req.url, ctx.req.options);
        });
      };

      return requestInterceptors.reduce(reducer, Promise.resolve()).then(function () {
        var ret = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        ctx.req.url = ret.url || ctx.req.url;
        ctx.req.options = ret.options || ctx.req.options;
        return Promise.resolve();
      });
    }
  }]);

  return Core;
}();

function fetchMiddleware(ctx, next) {
  var _ctx$req = ctx.req,
      _ctx$req$options = _ctx$req.options,
      options = _ctx$req$options === void 0 ? {} : _ctx$req$options,
      _ctx$req$url = _ctx$req.url,
      url = _ctx$req$url === void 0 ? '' : _ctx$req$url,
      cache = ctx.cache,
      responseInterceptors = ctx.responseInterceptors;
  var _options$timeout = options.timeout,
      timeout = _options$timeout === void 0 ? 0 : _options$timeout,
      _options$type = options.type,
      type = _options$type === void 0 ? 'normal' : _options$type,
      _options$useCache = options.useCache,
      useCache = _options$useCache === void 0 ? false : _options$useCache,
      _options$method = options.method,
      method = _options$method === void 0 ? 'get' : _options$method,
      params = options.params,
      ttl = options.ttl;

  if (type !== 'normal') {
    return next();
  }

  if (!window || !window.fetch) {
    throw new Error('window or window.fetch not exist!');
  } // 从缓存池检查是否有缓存数据


  var needCache = method.toLowerCase() === 'get' && useCache;

  if (needCache) {
    var responseCache = cache.get({
      url: url,
      params: params
    });

    if (responseCache) {
      responseCache = responseCache.clone();
      responseCache.useCache = true;
      ctx.res = responseCache;
      return next();
    }
  }

  var response;

  if (timeout > 0) {
    response = Promise.race([window.fetch(url, options), timeout2Throw(timeout)]);
  } else {
    response = window.fetch(url, options);
  } // 执行 response 的拦截器


  responseInterceptors.forEach(function (handler) {
    response = response.then(function (res) {
      return handler(res, options);
    });
  });
  return response.then(function (res) {
    // 是否存入缓存池
    if (needCache) {
      if (res.status === 200) {
        var copy = res.clone();
        copy.useCache = true;
        cache.set({
          url: url,
          params: params
        }, copy, ttl);
      }
    }

    ctx.res = res;
    return next();
  });
}

function parseResponseMiddleware(ctx, next) {
  var res = ctx.res,
      req = ctx.req;

  var _ref = req || {},
      _ref$options = _ref.options,
      _ref$options$response = _ref$options.responseType,
      responseType = _ref$options$response === void 0 ? 'json' : _ref$options$response,
      _ref$options$charset = _ref$options.charset,
      charset = _ref$options$charset === void 0 ? 'utf8' : _ref$options$charset,
      _ref$options$getRespo = _ref$options.getResponse,
      getResponse = _ref$options$getRespo === void 0 ? false : _ref$options$getRespo;

  if (!res || !res.clone) {
    return next();
  }

  var copy = res.clone();
  copy.useCache = res.useCache || false;
  return next().then(function () {
    // 解析数据
    if (charset === 'gbk') {
      try {
        return res.blob().then(readerGBK).then(safeJsonParse);
      } catch (e) {
        throw new ResponseError(copy, e.message);
      }
    } else if (responseType === 'json') {
      return res.text().then(safeJsonParse);
    }

    try {
      // 其他如text, blob, arrayBuffer, formData
      return res[responseType]();
    } catch (e) {
      throw new ResponseError(copy, 'responseType not support');
    }
  }).then(function (body) {
    if (copy.status >= 200 && copy.status < 300) {
      // 提供源response, 以便自定义处理
      if (getResponse) {
        ctx.res = {
          data: body,
          response: copy
        };
        return;
      }

      ctx.res = body;
      return;
    }

    throw new ResponseError(copy, 'http error', body);
  });
}

function simplePostMiddleware(ctx, next) {
  var _ctx$req$options = ctx.req.options,
      options = _ctx$req$options === void 0 ? {} : _ctx$req$options;
  var _options$method = options.method,
      method = _options$method === void 0 ? 'get' : _options$method;

  if (['post', 'put', 'patch', 'delete'].indexOf(method.toLowerCase()) === -1) {
    return next();
  }

  var _options$requestType = options.requestType,
      requestType = _options$requestType === void 0 ? 'json' : _options$requestType,
      data = options.data; // 数据使用类axios的新字段data, 避免引用后影响旧代码, 如将body stringify多次

  if (data) {
    var dataType = Object.prototype.toString.call(data);

    if (dataType === '[object Object]' || dataType === '[object Array]') {
      if (requestType === 'json') {
        options.headers = objectSpread({
          Accept: 'application/json',
          'Content-Type': 'application/json;charset=UTF-8'
        }, options.headers);
        options.body = JSON.stringify(data);
      } else if (requestType === 'form') {
        options.headers = objectSpread({
          Accept: 'application/json',
          'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
        }, options.headers);
        options.body = stringify(data);
      }
    } else {
      // 其他 requestType 自定义header
      options.headers = objectSpread({
        Accept: 'application/json'
      }, options.headers);
      options.body = data;
    }
  }

  ctx.req.options = options;
  return next();
}

function simpleGetMiddleware(ctx, next) {
  var _ctx$req$options = ctx.req.options,
      options = _ctx$req$options === void 0 ? {} : _ctx$req$options;
  var _ctx$req$url = ctx.req.url,
      url = _ctx$req$url === void 0 ? '' : _ctx$req$url; // 将 method 改为大写

  options.method = options.method ? options.method.toUpperCase() : 'GET'; // 支持类似axios 参数自动拼装, 其他method也可用, 不冲突.

  if (options.params && Object.keys(options.params).length > 0) {
    var str = url.indexOf('?') !== -1 ? '&' : '?';
    ctx.req.originUrl = url;
    url = "".concat(url).concat(str).concat(stringify(options.params));
    ctx.req.url = url;
  }

  ctx.req.options = options;
  return next();
}

var request = function request() {
  var initOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var middleware = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var coreInstance = new Core(initOptions, middleware);

  var umiInstance = function umiInstance(url) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var mergeOptions = objectSpread({}, initOptions, options, {
      headers: objectSpread({}, initOptions.headers, options.headers),
      params: objectSpread({}, initOptions.params, options.params),
      method: (options.method || 'get').toLowerCase()
    });

    return coreInstance.request(url, mergeOptions);
  }; // 中间件


  umiInstance.use = coreInstance.use.bind(coreInstance); // 拦截器

  umiInstance.interceptors = {
    request: {
      use: Core.requestUse
    },
    response: {
      use: Core.responseUse
    }
  }; // 请求语法糖： reguest.get request.post ……

  var METHODS = ['get', 'post', 'delete', 'put', 'rpc', 'patch'];
  METHODS.forEach(function (method) {
    umiInstance[method] = function (url, options) {
      return umiInstance(url, objectSpread({}, options, {
        method: method
      }));
    };
  });
  return umiInstance;
};
/**
 * extend 方法参考了ky, 让用户可以定制配置.
 * initOpions 初始化参数
 * @param {number} maxCache 最大缓存数
 * @param {string} prefix url前缀
 * @param {function} errorHandler 统一错误处理方法
 * @param {object} headers 统一的headers
 */


var _extendMiddlewares = [simplePostMiddleware, simpleGetMiddleware, fetchMiddleware, parseResponseMiddleware];
var extend = function extend(initOptions) {
  return request(initOptions, _extendMiddlewares);
};
/**
 * 暴露 fetch 中间件，去除响应处理的中间件和前后缀处理的中间件，保障依旧可以使用
 */

var _fetchMiddlewares = [simplePostMiddleware, simpleGetMiddleware, fetchMiddleware];
var fetch = request({}, _fetchMiddlewares);
var request$1 = request({}, _extendMiddlewares);

export default request$1;
export { Onion, RequestError, ResponseError, extend, fetch };
